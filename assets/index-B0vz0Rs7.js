import{_ as c,E as r}from"./el-card-BC1LQGcn.js";import"./base-BOVE5efH.js";import{E as o}from"./el-link-b02lqcaU.js";import{d,r as m,m as T,w as u,f as s,b as l,Q as t,o as R}from"./index-rcW_pH8g.js";import"./index-BRdTUeC1.js";import"./event-BB_Ol6Sd.js";import"./icon-D8zniuSg.js";import"./style-CQyj6J43.js";import"./use-global-config-ZfVEybhJ.js";import"./index-DL17Y2WH.js";import"./index-DNrEt1wy.js";const A=d({name:"=Mysql"}),I=d({...A,setup(L){const i=m([{id:1,h2:"安装"},{id:2,h2:"语法"}]);return(p,n)=>{const a=o,e=r,E=c;return R(),T(E,{data:i.value},{svg:u(()=>n[0]||(n[0]=[l("svg",{t:"1737887986335",class:"icon",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"18456",width:"40",height:"40"},[l("path",{d:"M973.04064 931.072c-27.31008-0.8192-54.66624-0.26112-82.00192-0.26112-16.68096 0-23.552-6.72768-23.5776-23.25504-0.03584-56.192 0.31744-112.38912-0.19456-168.576-0.1792-19.54816 9.32864-26.42432 21.85728-27.27936 13.16864-0.90112 21.87264 10.69568 21.92896 27.36128 0.13312 40.33536 0.04608 80.67072 0.04608 121.00608 0 7.58272 0.39936 15.19616-0.13312 22.74304-0.4096 5.77024 1.93536 6.7584 7.0656 6.6816 18.33472-0.26112 36.7104 0.58368 55.00416-0.34816a26.112 26.112 0 0 1 25.36448 12.672v16.56832a26.624 26.624 0 0 1-25.35936 12.68736z m-199.2192-581.23264c-39.07584 22.016-81.74592 33.28-125.7984 40.6528a687.58528 687.58528 0 0 1-127.872 10.09664 553.856 553.856 0 0 1-67.00544-2.01728c-60.8256-6.33344-120.9856-15.77472-176.31744-43.67872-22.23616-11.2128-42.23488-25.69728-55.35232-47.87712a78.6944 78.6944 0 0 1-10.69568-42.44992c0.256-12.71808 18.54464-19.456 31.232-11.52 40.85248 25.4464 86.016 38.912 132.75136 48.17408a746.624 746.624 0 0 0 82.66752 10.80832 791.88992 791.88992 0 0 0 107.63776 1.09056 561.87904 561.87904 0 0 0 172.9792-34.69312 429.44 429.44 0 0 0 54.45632-26.16832 17.664 17.664 0 0 1 23.89504 4.608 68.34176 68.34176 0 0 0 8.704 11.21792 14.87872 14.87872 0 0 1 4.096 16.57344c-7.35232 31.16544-29.08672 50.3552-55.37792 65.18272zM732.16 230.46656a482.96448 482.96448 0 0 1-119.33696 31.26784 671.4112 671.4112 0 0 1-140.8 5.94944c-57.25184-3.51744-113.95072-11.96032-168.07936-32.60928-28.24704-10.752-55.36768-23.58272-77.05088-45.12256-35.79392-35.55328-31.01696-79.17568 5.95456-110.9504 37.27872-32.04096 82.432-46.0032 128.75776-57.09312a582.39488 582.39488 0 0 1 83.16416-13.312c11.22816-1.024 23.16288 1.81248 33.9968-3.47136H545.28c2.83136 3.98848 6.97856 1.81248 10.47552 1.98656 66.94912 3.38432 132.0192 15.39584 193.024 43.9808 25.05216 11.74016 47.98464 26.92608 62.75584 51.77856 14.98624 25.22112 12.63616 52.05504-4.4288 75.33568-19.072 25.99424-46.5664 40.11008-74.94656 52.25984zM179.2 930.816a18.944 18.944 0 0 1-20.52608-19.968c-0.0768-34.47808 0-68.95616-0.08192-103.424 0-2.21184 1.3568-5.504-1.16736-6.47168-3.456-1.32096-3.84512 2.56-5.39648 4.5568-7.83872 10.24-15.49824 20.67456-23.936 30.42304-9.56928 11.05408-20.87936 11.10528-30.27456 0.18432-8.41216-9.77408-16.07168-20.1984-23.936-30.43328-1.536-2.00704-1.85344-6.0928-5.29408-4.7872-3.10272 1.1776-1.3056 4.8896-1.31584 7.37792-0.128 32.06656-0.08704 64.128-0.08704 96.19456 0 14.59712-4.224 22.93248-13.14816 25.92768-10.4448 3.5072-19.77856-0.4352-28.42624-12.0064v-194.6624c11.16672-19.072 32.41472-12.288 41.66656 1.39264 13.00992 19.2768 27.23328 37.76 40.7552 56.704 3.8656 5.40672 6.59968 4.36736 9.99936-0.39936q20.56704-28.81024 41.43616-57.41056c8.54016-11.7248 20.00384-15.7952 29.74208-10.78784a18.944 18.944 0 0 1 11.008 18.1248q-0.04608 89.984-0.0512 179.97312c-0.01024 12.07808-8.25856 19.5328-20.9664 19.49184zM237.47072 385.50528c42.73664 27.136 90.624 40.26368 139.42784 49.87904a660.80768 660.80768 0 0 0 73.76384 9.216c29.696 2.432 59.31008 1.43872 88.9344 1.41824a588.2368 588.2368 0 0 0 120.25344-13.96224 444.58496 444.58496 0 0 0 120.76032-43.07968 40.12032 40.12032 0 0 1 18.60096-7.05024c20.096-0.30208 30.65344 13.44512 26.03008 33.08544-7.68 32.59904-29.75744 53.00736-57.52832 68.38272-38.97344 21.57056-81.32096 32.768-125.1328 39.64928-23.90528 3.7632-47.81056 6.46656-71.9104 8.61696-18.31424 1.63328-36.49024 0.31744-54.67136 1.50528a503.63904 503.63904 0 0 1-88.4736-4.35712c-53.76-6.528-107.008-16.384-155.648-41.74336-27.1872-14.1824-51.88608-31.93856-61.55776-63.21664-3.072-10.00448-7.79776-20.67968-1.08032-31.232 7.50592-11.77088 16.55296-14.5408 28.23168-7.11168z m3.80416 132.0192c42.63936 27.50976 90.59328 40.39168 139.33056 50.304a637.312 637.312 0 0 0 74.79296 9.30304 803.1488 803.1488 0 0 0 97.2544 1.23904c84.82816-3.328 166.69696-19.10784 241.77152-61.79328 13.99296-7.95648 26.15296 1.81248 26.81856 22.59968 0.62976 19.42528-8.93952 36.352-22.10816 50.56512-24.48384 26.44992-56.50944 40.28928-89.93792 50.90816a499.56352 499.56352 0 0 1-90.8032 19.15392A652.98944 652.98944 0 0 1 521.02144 665.6a520.63744 520.63744 0 0 1-68.17792-2.00192c-60.416-6.4768-120.2688-15.60064-175.33952-43.45856-22.64064-11.45344-42.73152-26.02496-56.22272-48.2816a76.03712 76.03712 0 0 1-10.43456-37.376 19.49696 19.49696 0 0 1 30.43328-16.95744z m3.53792 317.952a36.16768 36.16768 0 0 1-3.49696-19.03616 17.54112 17.54112 0 0 1 16.128-17.7664 21.376 21.376 0 0 1 23.30624 10.68032c7.6288 13.4144 14.848 27.0592 22.28736 40.58624 1.28 2.32448 1.80224 5.86752 4.5824 6.32832 3.584 0.59392 3.49696-3.6608 4.70016-5.69856 7.168-12.1344 13.93664-24.51968 20.82816-36.82304 9.216-16.50688 26.74688-19.92192 38.2976-7.45984 7.62368 8.22272 7.41376 16.384-2.048 24.45312a30.1056 30.1056 0 0 0-7.5008 10.24l-83.6352 166.44608c-3.072 6.144-4.88448 12.95872-11.52 16.56832h-10.3936c-1.664-4.94592-7.85408-4.82304-10.18368-9.37984-5.08416-9.94304-7.09632-19.3536-1.36704-30.12096 11.5968-21.79584 22.12352-44.15488 33.55136-66.048a16.24576 16.24576 0 0 0-0.13824-16.8704c-11.45856-21.87264-22.36928-44.01664-33.39776-66.10432z m200.04864 14.58176c13.3376-1.95072 23.936 4.81792 25.42592 17.11104a23.6544 23.6544 0 0 0 13.35808 17.92c21.2224 12.93312 54.66624 10.3168 70.45632-3.584 11.20768-9.87136 9.216-20.77696-4.87424-26.30656a78.464 78.464 0 0 0-24.0128-6.53824c-7.04512-0.34304-9.80992-0.95232-18.01728-1.62304-20.03968-3.33824-39.63392-8.192-56.43776-20.62848-28.93824-21.36576-29.56288-62.04928-0.17408-87.17824 33.76128-28.85632 93.89056-28.02176 124.416-6.10816 15.2832 10.97216 27.44832 24.38144 28.3648 44.4672a20.31616 20.31616 0 0 1-16.896 20.70016c-10.55232 1.20832-23.4496-6.97856-24.22784-17.13152a20.48 20.48 0 0 0-8.10496-14.52544c-18.14528-16.41472-60.17536-15.6928-77.09184 1.24416-8.38144 8.39168-8.50432 11.776 0.4608 19.78368 10.94656 9.7792 24.97024 11.05408 38.67648 12.65664 25.6 2.9952 50.91328 8.89856 69.23776 27.42272 25.78944 26.06592 25.66656 56.25344-2.42176 80.3584-35.77856 30.72-93.12768 30.65856-130.14016 3.6608a62.88384 62.88384 0 0 1-23.86944-37.7856 21.94432 21.94432 0 0 1 15.872-23.92064z m251.008-135.61856c21.39648-5.71392 44.032-4.35712 66.41152-1.37216a66.7648 66.7648 0 0 1 49.024 30.47424 60.416 60.416 0 0 1 10.40384 34.10432c0.03072 14.47424 0 28.9536 0 43.42784 0 12.75392-0.16384 25.50784 0.06656 38.25664a46.25408 46.25408 0 0 1-4.05504 21.55008 20.51072 20.51072 0 0 0 0.33792 21.16096c7.89504 14.16192 0.10752 24.64768-16.19456 24.62208-6.09792 0-12.46208 1.0752-17.72032-3.24608a3.21024 3.21024 0 0 0-4.49536 0.4864c-12.15488 7.90528-25.8304 7.54176-39.424 6.85056-15.06304-0.768-30.45376 2.75968-45.16352-2.048-26.99264-8.84224-44.13952-26.3168-48.04608-55.49056-4.224-31.54432-2.83648-63.2576-1.39776-94.72 1.6128-35.584 20.36224-56.064 50.2528-64.06144z m-7.12704 152.2176a20.352 20.352 0 0 0 15.7184 20.85888c11.20768 3.62496 22.528 1.10592 33.792 1.75616 2.72896 0.1536 6.8352 1.9456 8.192-1.62304 1.08544-2.84672-2.94912-4.096-4.49536-6.25152-4.27008-5.89312-7.20384-11.776-3.98848-19.49184a20.39808 20.39808 0 0 1 18.79552-14.336c8.48896-0.6656 13.8752 3.95264 21.31968 9.48736 0-28.16-0.73728-54.66624 0.32256-81.11104a21.09952 21.09952 0 0 0-21.0432-21.0944q-23.8848-0.30208-47.77984 0a21.92896 21.92896 0 0 0-20.82816 20.7616q-0.24064 45.50656-0.00512 91.03872z",fill:"#1296db","p-id":"18457"})],-1),l("h1",null,"MySql",-1)])),describe:u(()=>n[1]||(n[1]=[l("p",null," MySQL是一个流行的关系型数据库管理系统（R DBMS），MySQL是一个开源的关系型数据库管理系统，它使用结构化的查询语言（SQL）进行数据管理。MySQL能够存储大量的数据，并提供数据的增加、删除、修改和查询功能。 ",-1)])),content:u(()=>[s(e,{id:"part1",shadow:"hover"},{default:u(()=>[n[16]||(n[16]=l("h2",null,"安装数据库",-1)),n[17]||(n[17]=l("p",null,"步骤",-1)),l("ul",null,[l("li",null,[s(a,{type:"primary",icon:"Link",target:"_blank",href:"https://dev.mysql.com/downloads/mysql/"},{default:u(()=>n[2]||(n[2]=[t(" https://dev.mysql.com/downloads/mysql/ ")])),_:1,__:[2]}),n[3]||(n[3]=t(" （ 下载文件，并非安装包） "))]),l("li",null,[s(a,{type:"primary",icon:"Link",target:"_blank",href:"https://www.mysql.com/downloads/"},{default:u(()=>n[4]||(n[4]=[t(" https://www.mysql.com/downloads/ ")])),_:1,__:[4]}),n[5]||(n[5]=t(" （安装包） "))]),n[6]||(n[6]=l("li",null," 打开官网点DOWNLOADS => 点MySQL Community (GPL) Downloads » => 点MySQL Installer for Windows ",-1)),n[7]||(n[7]=l("li",null," 选系统，然后x64安装，点No thanks, just start my download.下载，32位是兼容64的 ",-1)),n[8]||(n[8]=l("li",null," 双击安装 => 五种方式1默认 2服务器 3客户端 4插件 5自定义 => 默认next => 改路径 => 其他默认 ",-1)),n[9]||(n[9]=l("li",null,"密码可设置大写 X-20220511",-1)),n[10]||(n[10]=l("li",null," 卸载方法 => 打开安装包 => 点 remove => 全勾选 => 默认执行 => 应用卸载MySQL下载器 ",-1)),n[11]||(n[11]=l("li",null," 文件安装方法： 解压 => 开后在bin|docs文件夹同级目录创建一个 my.ini文件,并复制粘贴进去，改两行安装存放目录 ",-1)),n[12]||(n[12]=l("li",null,[t(" 参数 "),l("ul",null,[l("li",null,"mysql"),l("li",null,"#设置3306端口"),l("li",null,"port=3306"),l("li",null,"#设置mysql的安装目录"),l("li",null," basedir=D:\\................................\\mysql-8.0.29-winx64 "),l("li",null,"#设置mysql数据库的数据的存放目录"),l("li",null," datadir=D:\\................................\\mysql-8.0.29-winx64\\data "),l("li",null,"#允许最大连接数"),l("li",null,"max_connections=200"),l("li",null," #允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统 "),l("li",null,"max_connect_errors=10"),l("li",null,"#服务端使用的字符集默认为UTF8"),l("li",null,"character-set-server=utf8"),l("li",null,"#创建新表时将使用的默认存储引擎"),l("li",null,"default-storage-engine=INNODB"),l("li",null,"#默认使用“mysql_native_password”插件认证"),l("li",null,"default_authentication_plugin=mysql_native_password"),l("li",null,"#设置mysql客户端默认字符集 default-character-set=utf8"),l("li",null," client #设置mysql客户端连接服务端时默认使用的端口 port=3306 default-character-set=utf8 "),l("li",null," 去环境变量里添加路径,复制bin文件夹的路径即可,在电脑图标右键属性=>高级设置 =>系统的环境变量=>找到PATH路径中添加bin的路径=>确认 ")])],-1)),n[13]||(n[13]=l("li",null,"打开终端或命令行 输入 mysql -uroot -p 测试安装成功与否",-1)),n[14]||(n[14]=l("li",null,[t(" 连接mysql时报错：Public Key Retrieval is not allowed（不允许公钥检索）,解决方法： "),l("ul",null,[l("li",null," 右键项目，编辑 -- 连接设置——驱动属性——allowPublicKeyRetrieval=false "),l("li",null," （这里的运输公钥检索是默认关闭的，需要把它开启），改为allowPublicKeyRetrieval=true即可。 "),l("li",null," 连接数据库后，如果不想把此项开启，那在改为false就行，连接过一次后面都可正常在重新连接使用，但是如果新增连接还是要把此项开启，不然可能还是会继续报错。 ")])],-1)),n[15]||(n[15]=l("li",null,[t(" 启动 "),l("ul",null,[l("li",null,"终端/命令行输入mysql -uroot -p")])],-1))]),n[18]||(n[18]=l("p",null,"图形化软件",-1)),n[19]||(n[19]=l("table",null,[l("tbody",null,[l("tr",null,[l("th",null,"软件"),l("th",null,"免费版"),l("th",null,"Windows"),l("th",null,"Mac"),l("th",null,"Linux"),l("th",null,"功能")]),l("tr",null,[l("td",null,"sequelpro"),l("td",null,"有"),l("td"),l("td",null,"O"),l("td"),l("td",null,[l("a",{href:"http://www.sequelpro.com/"},"http://www.sequelpro.com/")])]),l("tr",null,[l("td",null,"dbeaver"),l("td",null,"有"),l("td",null,"O"),l("td",null,"O"),l("td",null,"O"),l("td",null,[l("a",{href:"https://dbeaver.io/"},"https://dbeaver.io/")])]),l("tr",null,[l("td",null,"navicat"),l("td"),l("td",null,"O"),l("td",null,"O"),l("td",null,"O"),l("td",null,[l("a",{href:"https://www.navicat.com.cn/"},"https://www.navicat.com.cn/")])]),l("tr",null,[l("td",null,"SQLyog"),l("td"),l("td",null,"O"),l("td"),l("td"),l("td")]),l("tr",null,[l("td",null,"dbForge"),l("td",null,"有"),l("td",null,"O"),l("td"),l("td"),l("td",null,[l("a",{href:"https://www.heidisql.com/"},"https://www.heidisql.com/")])]),l("tr",null,[l("td",null,"heidisql"),l("td",null,"有"),l("td",null,"O"),l("td"),l("td"),l("td",null,[l("a",{href:"https://www.devart.com/dbforge/mysql/studio/"},"https://www.devart.com/dbforge/mysql/studio/")])])])],-1)),n[20]||(n[20]=l("ul",null,[l("li",null," 推荐总结:免费版本选择跨平台的 dbeaver (opens new window)，但如果你不差钱就选 navicat ")],-1))]),_:1,__:[16,17,18,19,20]}),s(e,{id:"part2",shadow:"hover"},{default:u(()=>n[21]||(n[21]=[l("h2",null,"语法",-1),l("p",null,"连接 命令行模式",-1),l("pre",null,[l("code",{class:"language-js line-numbers"},`  mysql -uroot -p:                       // mysql命令   -uroot软件帐号   -p密码
  mysql -uroot -p -P3306 -h127.0.0.1:    // 大写P 为连接的端口3306  -h为连接的主机
  进来之后显示  mysql>                    // 代表发送一切指令都是给mysql服务器的
  注意:                                  // 命令必须分号 ； 结尾，才会执行
  \\c                                     // 输入错误指令时，或者放弃不想执行,不加分号回车 或者 \\c 即可不执行命令
  exit                                   // 所有的操作工作完成后，输入exit 进行结束，退出即可`)],-1),l("p",null,"创建/查看数据库",-1),l("pre",null,[l("code",{class:"language-js line-numbers"},`  create database web charset utf8;     // create database + 语义化数据库名 + 字符集;
  show databases;                       // 来查看数据库
  use web;                              // 进到文件夹内
  drop database web;                    // 删除数据库
  drop database if exists web;          // 如果数据库存在则删除，用 if exists 来判断
  show create database web;             // 查看数据库的结构`)],-1),l("p",null,"数据库的连接",-1),l("ul",null,[l("li",null,"左上角+号点击 => 选 Popular 里面的MySQL"),l("li",null,"输入数据库名称 + 密码 点下一步创建，驱动下载，完成"),l("li",null," 项目展开=> 数据库右键=> 新建数据库=> 输入数据库名=> 选好字符集utf8=> 排序选utf8_general_ci "),l("li",null," 双击创建好的数据库，打开图形化界面 => 在工具栏找到SQL=> 下拉找到 新建SQL编辑器 "),l("li",null," 输入语句按执行就可以看到数据库界面了，例如 show DATABASEs;点执行，下方就会出现数据库表(注意大小写) "),l("li",null,"用完了可以用ctrl + / 注释掉 ，注意，每次执行都要加上分号 ；"),l("li",null,[t(" 创建后的东西都要点击刷新，这样才会出来 "),l("pre",null,[l("code",{class:"language-js line-numbers"},`  CREATE TABLE class (id int PRIMARY KEY AUTO_INCREMENT,cname varchar(30) not null,description varchar(100) null) charset utf8;
  // 创建表 表名为班级 (id字段 int类型 组件 自增，班级名字 字符串类型 不允许为空，介绍 也是字符串类型 允许位空) 字符编码;

  desc class;                                                // （可以使用命令来查看表，或者在表上双击也可以看到）
  drop table if exists class;                                // 删除表，并添加判断条件，如果有就删除，需要点刷新才会显示
  INSERT INTO class set cname = 'PHP',description='学习PHP'; // 往class表添加数据 添加set字段 班级和描述 （在dbeaver最底下点击+号也可以直接手动录入，不用写命令行）
  INSERT INTO class (cname,description) VALUES('jsp','jsp学习'),('vue','学习vue'),('mysql',null); // 多值输入
  create TABLE test like class;                              // 创建test表,这个表数据来源于class表；
  insert into test select * from class;                      // 数据都想用class的，进入表 查询数据源 *所有字段 来自 class;
  insert into test (cname) select cname from class;          // 只想把select表的cname拿出来 只查询 cname 来自class
  CREATE table a select * from class;                        // 当创建表的时候，就把数据拿过来
  CREATE TABLE b (id int PRIMARY KEY AUTO_INCREMENT,cname varchar(30)) select cname from class;         // 创建表只复制cname 来源于class;
  CREATE TABLE b (id int PRIMARY KEY AUTO_INCREMENT,name varchar(30)) select cname as name from class;  // 改名用 对应上name 旧名 as 新名 `)])])],-1),l("p",null,"数据库查询",-1),l("pre",null,[l("code",{class:"language-js line-numbers"},`  // 查询
  SELECT                                                         // 查询
  SELECT * FROM NAME                                             // 查询所有字段 从哪张表查
  desc class;
  SELECT id,cname FROM class;                                    // 只查询id 和 cname 来自class里查，查询可改变顺序，那么查询结果也按顺序显示；
  SELECT cname,id as ids FROM class;                             // 只如果其他表有重名的，可以用as 起个别名
  SELECT * FROM class WHERE id>2;                                // 用条件来查询，使用 where id大于2的数据
  SELECT * FROM class WHERE cname = 'PHP';                       // 用条件来查询 使用 WHERE cname = 'php'的数据；
  SELECT * FROM class WHERE description like '%p%';              // 查询描述中 p任何位置关键词 的数据  用 like;
  SELECT * FROM class WHERE name '%p' OR name 'p%'OR id>2;       // 查询关键词p结尾 或者 p开始 或者 id>2的数据;
  SELECT * FROM class WHERE description like '%p%' and id>2;     // 查询 关键词p 并且id>2的;
  SELECT * FROM class WHERE age>=20  age<=30;                    // 查询年龄大于等于20，并且小于等于30
  SELECT * FROM class WHERE age>=20 and age<=30;                 // 查询年龄大于等于20，并且小于等于30
  SELECT * FROM class WHERE age NOT BETWEEN 20 and 30;           // 查询年龄介于 或 不介于+not 20 到 30之间
  SELECT * FROM class WHERE age NOT in(20,30);                   // 查询年龄 在 / 不在+not（20，30）里的数据，用in()
  SELECT * FROM class WHERE description not like '%p%' and id>2; // 查询 不包含 关键词p 并且id>2;
  select CONCAT(cname,description) form class;                   // 查询数据连接起来返回，缺点是没有分割，合并到一起
  SELECT DISTINCT id form class;                                 // 当有重复数据时，可以使用distinct 去重

  // mysql对null数据的处理：
  select * from class where description is not null;             // 查询数据库描述 哪些数据为空 或者 不为空+not；
  select description,if(cname,cname,'未分配') form class;         // 条件判断,cname值,有就返回,没有就定义,三元
  select cname,ifnull(description,'未分配') form class;           // 条件如果为空 就定义值，是上面的简写

  // 排序
  select sname,age from class order by age desc;                 // 查询sname和age来自class 排序 age 从大到小 desc降序
  select sname,age from class order by age asc;                  // 查询sname和age来自class 排序 age 从小到大 asc升序
  select * form class order by id desc;                          // 查询所有数据，以id 降序
  select * form class order by id desc,cname asc;                // 以id降序,如cname中有重复，指定用升序，是有优先级的
  select * form class order by id desc limit 1;                  // 把所有数据降序排序后，取最后一个数据，数值代表取的数
  select * form class order by id asc limit 0,2;                 // 把所有数据升序排序后，取前两个，从哪里取到哪里 0，2

  // 更新表记录
  UPDATE class SET description='未定义' where description is NULL;// 把class表中描述为空的数据更新为未定义
  UPDATE class SET cname='js' where description='未定义';         // 把class表中描述为未定义的数据更新为cname为js
  UPDATE class SET cname=cnmae+10 where description='未定义';     // 注意数据类型，字符和数值想加会报错

  // 删除
  DELETE FORM class where description='未定义'or description is nall; // 删除需要满足未定义或者为空的数据；
  DELETE FORM class order by id desc limit 2;                        // 删除class表中 id降序  最后两个数据；

  // 增加
  INSERT into class set cname='js2',description=null ;               // 在class表中增加js2 描述为空的数据
  INSERT into class set cname='js2',description=null ;               // 在class表中增加js2 描述为空的数
  INSERT INTO class (cname,description) VALUES('jsp','jsp学习'),('vue','学习vue'); // 多数据输入`)],-1),l("p",null,"数据维护",-1),l("pre",null,[l("code",{class:"language-js line-numbers"},`  ALTER TABLE class RENAME newClass;                             // 更改数据表的名字
  RENAME TABLE newclass to class;                                // 修改数据表的名字 和上面一样
  create table stu_bak select * from class;                      // 备份数据表  拷贝一份表
  ALTER table class charset gbk;                                 // 修改字符集，一般不会去修改，用utf8；
  DELETE from class;                                             // 删除数据表。执行时比较慢
  TRUNCATE class;                                                // 删除数据表。执行时快
  drop TABLE if EXISTS class;                                    // 删除表，与删除数据表不同，这个删除的是文件，数据表删除的是数据
  ALTER table class MODIFY cname varchar(40) not null;           // 改变字段
  ALTER table class CHANGE cname name char(40) not null;         // 改变字段名使用change 原名 新名 字段 非空
  ALTER table class ADD sex smallint default null;               // 添加新字段使用add 字段 字段类型 默认值 为空；
  ALTER table class ADD email varchar(50) default null AFTER ID; // 指定位置添加字段   ID后面添加字段
  ALTER table class ADD email varchar(50) default null first ID; // 指定位置添加字段   ID前面添加字段
  ALTER table class drop email;                                  // 删除指定字段
  // 删除组件
  ALTER table class MODIFY id int not null;                      // 先要把组件的 自增列 改为空，才能执行删除
  ALTER table class drop PRIMARY key;                            // 删除后，才能执行此命令，移除组件
  // 添加组件
  ALTER table class add PRIMARY key (id);                        // 添加组件列，()里写字段名
  ALTER table class MODIFY id int not null AUTO_INCREMENT;       //  添加自增列`)],-1),l("p",null,"数据类型",-1),l("ul",null,[l("li",null,[t(" 下列为支持的类型 "),l("table",null,[l("tbody",null,[l("tr",null,[l("th",null,"类型"),l("th",null,"大小"),l("th",null,"用途")]),l("tr",null,[l("td",null,"CHAR"),l("td",null,"0-255字节"),l("td",null,"定长字符串")]),l("tr",null,[l("td",null,"VARCHAR"),l("td",null,"0-65535 字节"),l("td",null,"变长字符串")]),l("tr",null,[l("td",null,"TINYBLOB"),l("td",null,"0-255字节"),l("td",null,"不超过 255 个字符的二进制字符串")]),l("tr",null,[l("td",null,"TINYTEXT"),l("td",null,"0-255字节"),l("td",null,"短文本字符串")]),l("tr",null,[l("td",null,"BLOB"),l("td",null,"0-65 535字节"),l("td",null,"二进制形式的长文本数据")]),l("tr",null,[l("td",null,"TEXT"),l("td",null,"0-65 535字节"),l("td",null,"长文本数据")]),l("tr",null,[l("td",null,"MEDIUMBLOB"),l("td",null,"0-16 777 215字节"),l("td",null,"二进制形式的中等长度文本数据")]),l("tr",null,[l("td",null,"MEDIUMTEXT"),l("td",null,"0-16 777 215字节"),l("td",null,"中等长度文本数据")]),l("tr",null,[l("td",null,"LONGBLOB"),l("td",null,"0-4 294 967 295字节"),l("td",null,"二进制形式的极大文本数据")]),l("tr",null,[l("td",null,"LONGTEXT"),l("td",null,"0-4 294 967 295字节"),l("td",null,"极大文本数据")])])])]),l("li",null,"字符集:数据库 <= 表 <= 字段 依次会继承"),l("li",null,"show CHARACTED set; 显示数据库能使用的字符集"),l("li",null,"校对规则： 是影响字符串之间的比较和排序的一种规则算法"),l("li",null,"select * from class; 查看表"),l("li",null,[t(" select left(canme,2),right(canme,2),mid(canme,2,1),mid(canm,2) from class; "),l("ul",null,[l("li",null,"left()从左边开始取两个字符串 right()从右取"),l("li",null," mid()从任何位置,从第二个开始，取1个 mid()任何位置,从第二个开始取所有 ")])]),l("li",null," UPDATE class set cname = CONCAT('https://baidu,com',mid(cname,10)) where id>=10; 设置内容并连接 "),l("li",null," select SUBSTRING(cname,2) from class; 跟mid()功能差不多，从什么开始，取后面的所有 "),l("li",null,"select CHAR_LENGTH(cname) from class; 计算字符串长度；"),l("li",null," select concat('编号'，id) as id ,concat('班级'，cname)as cname from calss; 修改并连接 "),l("li",null,[t(" select if(CHAR_LENGTH(cname)>8,concat(left(cname,8),'...'),cname) as cname from class; "),l("ul",null,[l("li",null," （如果字符长度大于8，那么就取8个字符和...连接，如果不超过就用cname) 别名cnamse from class;） ")])]),l("li",null," select * from class where cname REGEXP '^,h'; 使用正则表达式获取，h开头的 "),l("li",null," select * from class where description REGEXP 'php|mysql'; 获取包含php或者mysql的数据 "),l("li",null," UPDATE class set cname = REPLACE(cname,cname,CONCAT('后蹲人'，cname)) "),l("li",null,"where description REGEXP 'php|mysql'; 替换"),l("li",null,[t(" select * from class where cname like '_t%'; _代表一个字符，第二个字符包含t的 "),l("table",null,[l("tbody",null,[l("tr",null,[l("th",null,"MySQL数据类型"),l("th",null,"范围（有符号）"),l("th",null,"范围（无符号）")]),l("tr",null,[l("td",null,"tinyint(m)"),l("td",null,"1个字节 范围(-128~127)"),l("td",null,"(0，255)")]),l("tr",null,[l("td",null,"smallint(m) /td>"),l("td",null,"2个字节 范围(-32768~32767)/td>"),l("td",null,"(0，65 535) /td>")]),l("tr",null,[l("td",null,"mediumint(m)"),l("td",null,"3个字节 范围(-8388608~8388607)"),l("td",null,"(0，16 777 215)")]),l("tr",null,[l("td",null,"int(m)"),l("td",null,"4个字节 范围(-2147483648~2147483647)"),l("td",null,"(0，4 294 967 295)")]),l("tr",null,[l("td",null,"bigint(m)"),l("td",null,"8个字节 范围(+-9.22*10的18次方)"),l("td",null,"(0，18 446 744 073 709 551 615)")])])])]),l("li",null,[t(" 数值类型： "),l("ul",null,[l("li",null," alter table class add status TINYINT; 添加status字段 为tinyint类型的；值在-128 ~ 127之前 "),l("li",null," alter table class add stat TINYINT UNSIGNED; 添加stat字段，非负数值 "),l("li",null," alter table class add status int(5) ZEROFILL; 设置显示的位数为5 ，加zerofull会有前挡文填充 00 ")]),l("table",null,[l("tbody",null,[l("tr",null,[l("th",null,"类型"),l("th",null,"大小"),l("th",null,"范围（有符号）"),l("th",null,"范围（无符号）")]),l("tr",null,[l("td",null,"FLOAT"),l("td",null,"4 字节"),l("td",null," (-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38) "),l("td",null,"0，(1.175 494 351 E-38，3.402 823 466 E+38)")]),l("tr",null,[l("td",null,"DOUBLE"),l("td",null,"8 字节"),l("td",null," (-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) "),l("td",null," 0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) ")]),l("tr",null,[l("td",null,"DECIMAL"),l("td",null,"DECIMAL(M,D) ，m<65 是总个数，d <30"),l("td",null,"依赖于M和D的值"),l("td",null,"依赖于M和D的值")])])])]),l("li",null,[t(" 浮点数 "),l("ul",null,[l("li",null," alter table class add a float(10,2); 10代表整数部分和小数部分加起来总共10位，2代表有两位小数，6以下精准 "),l("li",null," alter table class add b decimal(10,2); 货币商品价格用decimal类型，其他类型用float ")])]),l("li",null,[t(" 枚举类型 "),l("ul",null,[l("li",null," ALTER TABLE class MODIFY sex ENUM('男'，'女') DEFAULT NULL； 修改数据类型，1代表男 2代表女 "),l("li",null," INSERT INTO class (cname,id,sex) VALUES('1'，'1','男')； 在添加的时候直接设置也是可以的 "),l("li",null,"SELECT * FROM class WHERE sex = 2; 查找数据"),l("li",null," ALTER TABLE article ADD flag SET('推荐','置顶'); 多选项值,最多能写64个 "),l("li",null," INSERT INTO article (title,status,click,flag) VALUES('标题','状态','点击数','推荐,置顶')； 添加数据 "),l("li",null," SELECT * FROM article WHERE FIND_IN_SET('推荐'，flag); 查找数据，查找名，在哪里查 "),l("li",null," SELECT * FROM article WHERE flag LIKE '%推荐%'; 查找数据或者使用 LIKE "),l("li",null," SELECT * FROM article WHERE flag = '推荐'; 查找数据 需要完全匹配； "),l("li",null," SELECT * FROM article WHERE flag & 3; 模糊匹配，采用的是二进制的模式 ")])])],-1),l("p",null,"日期时间",-1),l("ul",null,[l("li",null,[t(" 软件设置： 在DBeaver项目上右键 => 选择编辑 连接 => 服务器时区选Asia/ShangHai 或者自动检测 "),l("table",null,[l("tbody",null,[l("tr",null,[l("th",null,"日期时间类型"),l("th",null,"占用空间"),l("th",null,"日期格式"),l("th",null,"最小值"),l("th",null,"最大值"),l("th",null,"零值表示")]),l("tr",null,[l("td",null,"DATETIME"),l("td",null,"8 bytes"),l("td",null,"YYYY-MM-DD HH:MM:SS"),l("td",null,"1000-01-01 00:00:00"),l("td",null,"9999-12-31 23:59:59"),l("td",null,"0000-00-00 00:00:00")]),l("tr",null,[l("td",null,"TIMESTAMP"),l("td",null,"4 bytes"),l("td",null,"YYYY-MM-DD HH:MM:SS"),l("td",null,"1970-01-01 08:00:01"),l("td",null,"2038-01-19 03:14:07"),l("td",null,"00000000000000")]),l("tr",null,[l("td",null,"DATE"),l("td",null,"4 bytes"),l("td",null,"YYYY-MM-DD"),l("td",null,"1000-01-01"),l("td",null,"9999-12-31"),l("td",null,"0000-00-00")]),l("tr",null,[l("td",null,"TIME"),l("td",null,"3 bytes"),l("td",null,"HH:MM:SS"),l("td",null,"-838:59:59"),l("td",null,"838:59:59"),l("td",null,"00:00:00")]),l("tr",null,[l("td",null,"YEAR"),l("td",null,"1 bytes"),l("td",null,"YYYY"),l("td",null,"1901"),l("td",null,"2155"),l("td",null,"0000")])])])]),l("li",null," ALTER TABLE class ADD birthday datetime default null; 添加生日字段，类型为时间数据 默认为空 "),l("li",null,[t(" UPDATE class set birthday ='1998-02-12 08:22:13' WHERE id=1; 更新在id=2设置一个字段值 "),l("table",null,[l("tbody",null,[l("tr",null,[l("th",null,"格式化"),l("th",null,"描述"),l("th",null,"格式化"),l("th",null,"描述")]),l("tr",null,[l("td",null,"%a"),l("td",null,"缩写星期名"),l("td",null,"%b"),l("td",null,"缩写月名")]),l("tr",null,[l("td",null,"%c"),l("td",null,"月，数值"),l("td",null,"%D"),l("td",null,"带有英文前缀的月中的天")]),l("tr",null,[l("td",null,"%d"),l("td",null,"月的天，数值(00-31)"),l("td",null,"%e"),l("td",null,"月的天，数值(0-31)")]),l("tr",null,[l("td",null,"%f"),l("td",null,"微秒"),l("td",null,"%H"),l("td",null,"小时 (00-23)")]),l("tr",null,[l("td",null,"%h"),l("td",null,"小时 (01-12)"),l("td",null,"%I"),l("td",null,"小时 (01-12)")]),l("tr",null,[l("td",null,"%i"),l("td",null,"分钟，数值(00-59)"),l("td",null,"%j"),l("td",null,"年的天 (001-366)")]),l("tr",null,[l("td",null,"%k"),l("td",null,"小时 (0-23)"),l("td",null,"%l"),l("td",null,"小时 (1-12)")]),l("tr",null,[l("td",null,"%M"),l("td",null,"月名"),l("td",null,"%m"),l("td",null,"月，数值(00-12)")]),l("tr",null,[l("td",null,"%p"),l("td",null,"AM 或 PM"),l("td",null,"%r"),l("td",null,"时间，12-小时（hh:mm:ss AM 或 PM）")]),l("tr",null,[l("td",null,"%S"),l("td",null,"秒(00-59)"),l("td",null,"%s"),l("td",null,"秒(00-59)")]),l("tr",null,[l("td",null,"%T"),l("td",null,"时间, 24-小时 (hh:mm:ss)"),l("td",null,"%U"),l("td",null,"周 (00-53) 星期日是一周的第一天")]),l("tr",null,[l("td",null,"%u"),l("td",null,"周 (00-53) 星期一是一周的第一天"),l("td",null,"%V"),l("td",null,"周 (01-53) 星期日是一周的第一天，与 %X 使用")]),l("tr",null,[l("td",null,"%v"),l("td",null,"周 (01-53) 星期一是一周的第一天，与 %x 使用"),l("td",null,"%W"),l("td",null,"星期名")]),l("tr",null,[l("td",null,"%w"),l("td",null,"周的天 （0=星期日, 6=星期六）"),l("td",null,"%X"),l("td",null,"年，其中的星期日是周的第一天，4 位，与 %V 使用")]),l("tr",null,[l("td",null,"%x"),l("td",null,"年，其中的星期一是周的第一天，4 位，与 %v 使用"),l("td",null,"%Y"),l("td",null,"年，4 位")]),l("tr",null,[l("td",null,"%y"),l("td",null,"年，2 位"),l("td"),l("td")])])]),l("ul",null,[l("li",null," select cname,DATE_FORMAT(birthday,'%Y-%m-%d') from class; 格式化日期第一为字段，第二为日期类型 "),l("li",null," select cname,TIME_FORMAT(birthday,'%h:%i:%s') from class; 以时间格式化，可以不写年月日 "),l("li",null," select cname,TIME_FORMAT(birthday,'%h:%i:%s') from class; 以时间戳格式化，可以不写年月日 "),l("li",null," ALTER TABLE class ADD updated timestamp DEFAULT CURRENT_TIMESTAMP; 添加字段 名更up.. 时间戳类型 默认值为当前时间 "),l("li",null," ALTER TABLE class ADD updated timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP; 内容被修改的时候自动更新时间 ")])]),l("li",null,[t(" 时间处理函数 "),l("ul",null,[l("li",null," select YEAR(birthday),from class; year()得到年 month()月 day()日 时分秒的单词 "),l("li",null," select now(),CURRENT_DATE()，CURRENT_TIME(); 取到当前的日期 当前的时间 "),l("li",null," select DAYOFYEAR(now()); 取到一年之中的第几天 DAYOFMONTH(now()); 星期日是1 - 星期六是7 "),l("li",null,"select WEEKDAY(now()); 星期一是0 - 星期日是6"),l("li",null,"set @time = time(now()); 设置一个变量 设置为当前时间"),l("li",null,"select @time; 输出显示"),l("li",null," select TIME_TO_SEC(@time),SEC_TO_TIME(TIME_TO_SEC(@time)); 转换成秒数,并且根据当前秒数转换成时间 "),l("li",null," select TO_DAYS(now()),FROM_DAYS(TO_DAYS(now())); 从元年到现在经过的天数, TO_DAYS返回是哪天 "),l("li",null," select datediff(now(),barthday) form class; 两个时间相差的天数 "),l("li",null," select timediff(time(now()),time(birthday)) form class; 计算当前的时间和出生日期 两个时间差 "),l("li",null," select timestampdiff(day,birthady,now())form class; 根据天 单位来获取时间差 "),l("li",null," select timestampdiff(month,birthady,now())form class; 根据月/分/秒/周... 单位来获取时间差 ")])]),l("li",null,[t(" 日期查询 "),l("ul",null,[l("li",null," SELECT * from class WHERE birthday BETWEEN '1990-01-01' and '1999-12-31'; 介于之间的数据 "),l("li",null," select * from class order by birthday desc limit 1; 通过降序来查询，获取年龄最小的一位 "),l("li",null," select * from class where birthday =(select birthday from class order by birthday desc limit 1); 最准确的查询方法，重复的也会提取出来 ")])]),l("li",null,[t(" 一个大于20岁 的女生 最喜欢上的 班级 案例进行分写书写 "),l("ul",null,[l("li",null,"select TIMESTAMPDIFF(YEAR,birthday,NOW()) from stu;"),l("li",null,"select class_id FROM stu"),l("li",null,"WHERE sex = 2"),l("li",null,"and TIMESTAMPDIFF(YEAR,birthday,NOW()) > 20"),l("li",null,"GROUP by class_id"),l("li",null,"ORDER by count(id) DESC"),l("li",null,"limit 1;")])]),l("li",null,"日期计算的写法"),l("ul",null,[l("li",null," SELECT ADDTIME(now(),'08:00:00'); 得到当前时间后面增加8个小时后的结果 "),l("li",null," SELECT timestamp(now(),'08:00:00'); 得到当前时间后面增加8个小时后的结果,和上面一样 "),l("li",null," SELECT date_add(now(),INTERVAL 7 DAY); 算出7天后的日期， -7是前7天 ，day是单位 可以用年月日时分秒 "),l("li",null," SELECT date_sub(now(),INTERVAL 7 DAY); 反函数，往前减少，上面是往后增加 "),l("li",null,' SELECT date_sub(now(),INTERVAL "3 8" DAY); 反函数，往前减少，3天 8小时之前 '),l("li",null,"SELECT last_day(now()); 返回当前月的最后一天"),l("li",null," SELECT date_sub(now(),INTERVAL DAYOFMONTH(now())-1 day); 获取月初 -1是为了从1号月初开始计算 "),l("li",null,"SELECT * FROM article"),l("li",null,"WHERE publish_time<=last_day(now())"),l("li",null," AND publish_item>=date_sub(now(),INTERVAL DAYOFMONTH(now())-1 day); 获取本月月末发表的文章写法 "),l("li",null,"SELECT * FROM article"),l("li",null," WHERE publish_item>=date_sub(now(),INTERVAL 3 MONTH); 获取三个月内发表的文章，但并不是1号 "),l("li",null,"SELECT * FROM article"),l("li",null," WHERE publish_item>=DATE_FORMAT(date_sub(now(),INTERVAL 3 MONTH),'%Y-%m-01); 这样才是前三个月1号开始 "),l("li",null," SELECT last_day(date_sub(now(),interval 1 MONTH)); 取上个月最后一天 "),l("li",null,"SELECT last_day(now()); 取当月最后一天"),l("li",null," SELECT date_add(last_day(now()),interval 1 day) 取当月最后一天并增加1天就是下月的1号； "),l("li",null,"DAYOFWEEK 1-7 WEEKDAY 0-6 星期日 - 星期六 星期一 - 星期日"),l("li",null," SELECT date_add(now(),interval 3-DAYOFWEEK(NOW()) day)； 计算星期二是数字几 3-当前星期几 ")]),l("li",null,[t(" 考勤表按月打卡查询 迟到 "),l("ul",null,[l("li",null,"SELECT date_sub(now(),interval DATOFMONTH(now())-1 day);"),l("li",null,"SELECT * FROM ATTENDANCE"),l("li",null,"WHERE time(created_at)>'08:30:00'"),l("li",null," AND date(created-at)> date_sub(date_sub(now()),interval DATOFMONTH(now())-1 day); ")])]),l("li",null,[t(" 考勤表按月打卡查询 迟到2次 "),l("ul",null,[l("li",null,"SELECT stu_id,count(id) from attendance"),l("li",null,"WHERE time(created_at)>'08:30:00'"),l("li",null," AND date(created-at)> date_sub(date_sub(now()),interval DATOFMONTH(now())-1 day) "),l("li",null,"GROUP by stu_id"),l("li",null,"HAVING count(id) >= 2;")])]),l("li",null,[t(" 考勤表按周打卡查询 迟到 "),l("ul",null,[l("li",null,"SELECT date_add(now(),interval 0-WEEKDAY(NOW()) day);"),l("li",null,"select * from attendance"),l("li",null," where date(created_at) >= date(date_add(now()interval 0-WEEKDAT(now()) day)) "),l("li",null,"AND time(created_at) >= '09:00:00';")])]),l("li",null,"取到上周"),l("ul",null,[l("li",null,"SET @week = date_sub(now(),interval 1 week);"),l("li",null,"SELECT @week;"),l("li",null,"select * from attendance"),l("li",null," where date(created_at)>date(date_add(@week,interval 0-WEEKDAY(@week) day)) "),l("li",null," and date(created_at) <= date(date_add(@week,interval 4-WEEKDAY(@week) day)) "),l("li",null,"and time(created_at) >'08:30:00';")]),l("li",null,[t(" 查看周日还打卡的 "),l("ul",null,[l("li",null,"select * from attendance"),l("li",null," WHERE date(created_at) = date(date_add(now(),interval 6-WEEKDAY(now()) day)); ")])])],-1),l("p",null,"排序",-1),l("ul",null,[l("li",null,[t(" Code "),l("ul",null,[l("li",null," SELECT * FROM class ORDRE BY sex ASC; 升序，DESC降序，前提是拿到数据再排序 "),l("li",null," SELECT * FROM class ORDRE BY id DESC LIMIT 1; 取最新，第一个的数据 "),l("li",null," SELECT * FROM class WHERE sex=2 ORDRE BY id DESC LIMIT 1; 加入条件，取最新加入的女同学 "),l("li",null,"SELECT RAND(); 随机获取一个数据"),l("li",null," SELECT * FROM class ORDER BY RAND() DESC LIMIT 1; 随机取一个数据值 "),l("li",null," SELECT cname,birthday,MONTH(birthday) as m FROM stu ORDER BY m DESC; 按生日排序取数据 "),l("li",null," SELECT field('a','a','b','c'); a在后面三个数值中查找，返回在第几个位置出现， 1 "),l("li",null,"SELECT count(*) FROM stu; 会统计出目前数据库的数量"),l("li",null," SELECT count(*) FROM stu WHERE SEX='女'; 统计出女同学的数量 ，* 代表所有字段 "),l("li",null," SELECT count(class_id) FROM stu; 统计出女同学的数量 ,指定字段，会排除为空null的数据 "),l("li",null," SELECT class_id FROM stu WHERE class_id is not null ORDER BY class_id DESC LIMIT 1; "),l("li",null," SELECT max(class_id) from stu; 取字段中最大的值，并过滤空数据，跟上面的作用一样 "),l("li",null,"SELECT min(class_id) from stu; 取字段中最小的值")])]),l("li",null,[t(" 求和 平均 "),l("ul",null,[l("li",null,"SELECT sum(click) FROM article; 求和操作"),l("li",null,"SELECT svg(click) FROM article; 平均操作"),l("li",null," SELECT sname,ROUND(AVG(timestampdiff(YEAR,birthday,now()))) FROM stu; 求学生的平均年龄 ")])]),l("li",null,[t(" 去重 "),l("ul",null,[l("li",null," SELECT DISTINCT class_id from stu WHERE class_id is not null; 去重 "),l("li",null," SELECT DISTINCT class_id,name from stu WHERE class_id is not null; 当多个条件都满足才会去重 ")])]),l("li",null,[t(" 分组筛选 "),l("ul",null,[l("li",null," SELECT class_id,count(*) from stu GROUNP BY class_id HAVING count(*)>=2; 人数超过2个同学的班级 ")])])],-1)])),_:1,__:[21]})]),_:1},8,["data"])}}});export{I as default};
