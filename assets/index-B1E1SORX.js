import{_ as o,E as s}from"./el-card-BC1LQGcn.js";import"./base-BOVE5efH.js";import{d as t,r as p,m as u,w as a,f as h,b as e,Q as l,o as c}from"./index-rcW_pH8g.js";import"./index-BRdTUeC1.js";import"./event-BB_Ol6Sd.js";const x=t({name:"Ajax"}),M=t({...x,setup(m){const d=p([{id:1,h2:"使用"}]);return(g,n)=>{const r=s,i=o;return c(),u(i,{data:d.value},{svg:a(()=>n[0]||(n[0]=[e("svg",{t:"1737887293895",class:"icon",viewBox:"0 0 1229 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"16215",width:"40",height:"40"},[e("path",{d:"M839.782036 1023.903619H389.36428a20.54335 20.54335 0 1 1 0-40.894707h450.417756a20.54335 20.54335 0 1 1 0 40.894707z","p-id":"16216",fill:"#1296db"}),e("path",{d:"M716.905922 1023.903619H512.240395a20.351356 20.351356 0 0 1-20.543351-20.351356V860.132798a20.54335 20.54335 0 1 1 40.894707 0v122.876114h163.962815v-102.332763a20.54335 20.54335 0 1 1 40.894706 0v122.876114a20.351356 20.351356 0 0 1-20.54335 20.351356zM1167.515671 819.238092H61.630645a61.822045 61.822045 0 0 1-61.438057-61.438057v-57.598179a20.54335 20.54335 0 1 1 40.894707 0v57.598179a20.54335 20.54335 0 0 0 20.54335 20.351356h1105.885026a20.735344 20.735344 0 0 0 20.543351-20.351356V61.438057a20.735344 20.735344 0 0 0-20.543351-20.54335H833.830224a20.159362 20.159362 0 0 1-20.351356-20.351357A20.351356 20.351356 0 0 1 833.830224 0H1167.515671A61.630051 61.630051 0 0 1 1228.953728 61.438057v696.361978a61.822045 61.822045 0 0 1-61.438057 61.438057zM20.735938 637.803829a20.54335 20.54335 0 1 1 20.351357-20.54335 20.54335 20.54335 0 0 1-20.351357 20.54335z m0-81.981407A20.54335 20.54335 0 0 1 0.192588 535.279072V61.438057A61.438057 61.438057 0 0 1 61.630645 0h691.178142a20.351356 20.351356 0 0 1 20.351356 20.54335 20.159362 20.159362 0 0 1-20.351356 20.351357h-691.178142A20.54335 20.54335 0 0 0 41.087295 61.438057v473.841015A20.351356 20.351356 0 0 1 20.735938 556.782392z","p-id":"16217",fill:"#1296db"}),e("path",{d:"M1038.687746 674.858658V167.418705a38.398786 38.398786 0 0 0-38.398786-38.398785h-771.815591a38.398786 38.398786 0 0 0-38.398786 38.398785v507.439953a14.975526 14.975526 0 0 0 14.783532 14.783532h819.046098a14.975526 14.975526 0 0 0 14.783533-14.783532z m-818.470116-14.783533V265.527603h46.654524a14.783532 14.783532 0 1 0 0-29.567065h-46.654524V167.418705a8.255739 8.255739 0 0 1 8.255739-8.255739h772.199579a8.255739 8.255739 0 0 1 8.255739 8.255739v68.541833H330.614138a14.783532 14.783532 0 0 0 0 29.567065h678.314549v394.547522z","p-id":"16218",fill:"#1296db"}),e("path",{d:"M277.239826 199.481691a14.783532 14.783532 0 0 1-29.567065 0 14.783532 14.783532 0 0 1 29.567065 0zM330.614138 199.481691a14.783532 14.783532 0 1 1-14.783532-14.783532 14.783532 14.783532 0 0 1 14.783532 14.783532zM384.180444 199.481691a14.783532 14.783532 0 0 1-29.567065 0 14.783532 14.783532 0 0 1 29.567065 0zM471.729676 473.841015a14.783532 14.783532 0 0 0 20.927338 0L524.144018 441.586035a14.783532 14.783532 0 0 0-20.927338-19.199393l-6.143806 6.3358v-43.00664a19.199393 19.199393 0 0 1 19.199393-19.199393h43.198634a19.199393 19.199393 0 0 1 19.199393 19.199393 14.783532 14.783532 0 1 0 29.567065 0 48.38247 48.38247 0 0 0-48.38247-48.38247h-43.96661a48.574464 48.574464 0 0 0-48.574464 48.38247v42.04667L460.978016 422.386642a14.783532 14.783532 0 0 0-20.735345 19.199393zM603.053523 422.386642a15.16752 15.16752 0 0 0-20.927339 0l-31.487004 31.678998a14.783532 14.783532 0 0 0 20.927338 20.927338l6.3358-6.335799v39.358755a19.199393 19.199393 0 0 1-19.199393 19.199393h-42.814646a19.199393 19.199393 0 0 1-19.199393-19.199393 14.975526 14.975526 0 1 0-29.759059 0A48.574464 48.574464 0 0 0 515.888279 556.782392h43.198634a48.38247 48.38247 0 0 0 48.38247-48.38247v-40.318725l6.3358 6.3358a15.16752 15.16752 0 0 0 20.927338 0 14.783532 14.783532 0 0 0 0-20.927339zM406.45174 499.184213l-6.719787-17.087459h-55.486246l-6.527793 17.471447a63.54999 63.54999 0 0 1-6.719788 14.015557 10.175678 10.175678 0 0 1-8.83172 3.455891 12.479605 12.479605 0 0 1-9.215709-3.839879 11.519636 11.519636 0 0 1-4.031872-8.639727 19.199393 19.199393 0 0 1 0.959969-5.759818c0-1.919939 1.727945-4.799848 3.071903-8.255738l35.134889-88.893189 3.455891-9.215709a49.150446 49.150446 0 0 1 4.607854-9.023714 19.199393 19.199393 0 0 1 6.143806-5.759818 20.927338 20.927338 0 0 1 9.599696-2.111933 20.351356 20.351356 0 0 1 9.599696 2.111933 19.199393 19.199393 0 0 1 6.3358 5.759818 46.462531 46.462531 0 0 1 4.031873 7.487763c1.151964 2.495921 2.495921 6.143806 4.223866 10.559666l35.710871 88.317207a47.230506 47.230506 0 0 1 4.223866 14.591538 12.095617 12.095617 0 0 1-4.031872 8.831721 13.439575 13.439575 0 0 1-9.599697 3.839879 12.479605 12.479605 0 0 1-5.567824-1.151964 10.175678 10.175678 0 0 1-3.839878-3.071903 24.959211 24.959211 0 0 1-3.455891-6.143806c-1.151964-2.495921-2.303927-4.799848-3.071903-7.487763z m-54.910263-38.398785h40.894706l-20.735344-55.67824zM752.424799 499.184213l-6.527794-17.087459h-55.678239l-6.527794 17.087459a65.46993 65.46993 0 0 1-6.527793 14.015557 10.75166 10.75166 0 0 1-8.831721 3.455891 12.671599 12.671599 0 0 1-9.407702-3.839879 11.903624 11.903624 0 0 1-3.839879-8.639727 19.199393 19.199393 0 0 1 0-5.759817l3.071903-8.255739 35.134889-88.893189c0-2.687915 2.111933-5.759818 3.647884-9.215709a49.534433 49.534433 0 0 1 4.415861-9.023714 19.199393 19.199393 0 0 1 6.143805-5.759818 21.50332 21.50332 0 0 1 9.599697-2.111933 21.695314 21.695314 0 0 1 9.79169 2.111933 19.199393 19.199393 0 0 1 6.143806 5.759818 28.223107 28.223107 0 0 1 4.031872 7.487763c1.151964 2.495921 2.495921 6.143806 4.223867 10.559666l35.710871 88.317207a42.238664 42.238664 0 0 1 4.223866 14.591539 12.095617 12.095617 0 0 1-4.031873 8.83172 13.247581 13.247581 0 0 1-9.599696 3.839879 12.479605 12.479605 0 0 1-5.567824-1.151964 10.175678 10.175678 0 0 1-3.839878-3.071903 24.959211 24.959211 0 0 1-3.455891-6.143805c-0.383988-2.111933-1.535951-4.41586-2.303927-7.103776z m-54.910264-38.398785h40.894707l-20.735344-55.67824zM797.351378 488.624547l30.527034-44.734585L802.151226 403.187249a66.045911 66.045911 0 0 1-5.37583-9.79169 19.199393 19.199393 0 0 1-1.919939-8.063745 9.407702 9.407702 0 0 1 3.455891-7.103775 12.479605 12.479605 0 0 1 8.639726-3.071903 11.71163 11.71163 0 0 1 9.023715 3.45589 81.981407 81.981407 0 0 1 8.831721 12.6716L844.965872 425.266551l22.079302-33.21495 4.607854-7.295769a38.398786 38.398786 0 0 1 3.647885-4.991842 15.359514 15.359514 0 0 1 4.031872-2.879909 12.863593 12.863593 0 0 1 4.991842-0.95997 12.287611 12.287611 0 0 1 8.639727 3.071903 10.367672 10.367672 0 0 1 3.263897 7.487763 33.982925 33.982925 0 0 1-7.295769 16.895466l-26.87915 40.510719 28.991083 44.734585a65.853917 65.853917 0 0 1 5.759818 9.599697 19.199393 19.199393 0 0 1 1.727945 7.487763 13.055587 13.055587 0 0 1-1.535951 5.951812 12.863593 12.863593 0 0 1-11.135648 5.759817 11.71163 11.71163 0 0 1-6.527794-1.535951 14.975526 14.975526 0 0 1-4.41586-4.031872l-6.3358-9.407703-23.999241-38.398786-25.535192 38.398786c-2.111933 3.263897-3.455891 5.37583-4.415861 6.527794a17.279454 17.279454 0 0 1-2.879908 3.647884 12.671599 12.671599 0 0 1-4.223867 2.879909 14.015557 14.015557 0 0 1-5.759818 0.95997 11.327642 11.327642 0 0 1-8.255739-3.071903 10.943654 10.943654 0 0 1-3.45589-8.831721 31.487004 31.487004 0 0 1 7.295769-15.935496z","p-id":"16219",fill:"#1296db"})],-1),e("h1",null,"Ajax",-1)])),describe:a(()=>n[1]||(n[1]=[e("p",null," Ajax（Asynchronous JavaScript and XML）是一种用于创建快速动态网页的技术。它通过在后台与服务器进行少量数据交换，使得网页能够在不重新加载整个页面的情况下，对网页的某部分进行更新。 ",-1)])),content:a(()=>[h(r,{id:"part1",shadow:"hover"},{default:a(()=>n[2]||(n[2]=[e("h2",null,"使用",-1),e("p",null,"前言",-1),e("ul",null,[e("li",null,"Asynchronous javaScript and xml : 异步 js 和 xml"),e("li",null,"异步: 指的是并行执行"),e("li",null,"同步: 指的是按顺序从上往下执行"),e("li",null," ajax 的好处，可以在不刷新页面的时候，完成数据加载，产生局部刷新的效果，提高用户体验度 "),e("li",null,[l(" 最初使用xml标签存储数据，现在绝大部分用JSON格式的字符串 "),e("pre",null,[e("code",{class:"language-html line-numbers"},`  <!-- a.JSON文件 -->
  {
      "name": "张三",
      "age": 20,
      "gender": "男"
  }

  <!-- html文件 -->
  <head>
      <style>
          div {width: 400px; height: 400px; border: 1px solid black;}
      </style>
  </head>
  <body>
      <button id="btn">获取数据</button>
      <div></div>
      <script>
          btn.onclick = function () {                 // 不获取 js 也会通过ID 找到标签，正常情况下还是写上
              let xhr = new XMLHttpRequest();         // 1、创建xhr对象 （原生ajax对象）
              xhr.open('GET', './a.json')             // 2、初始化请求（GET / POST）,第一个参数是请求方式，地址文件是服务器地址，演示用的是本地文件
              xhr.send();                             // 3、发送请求
              xhr.onreadystatechange = function () {  // 4、监听读取状态改变事件

                  // 请求已经完成, readyState是读取状态：
                  // 0：请求未初始化  1：服务器连接已建立  2：请求已接收  3：请求处理中  4：请求已完成，且响应已就绪
                  if (xhr.readyState === 4) {
                      if (xhr.status === 200) {       // status是响应的状态码，常见的：200(成功) 404(请求资源错误) 500(服务器端错误)
                          // xhr.responseText 返回响应体，它是一个JSON格式的字符串
                          // let data = xhr.responseText;
                          // 我们需要将字符串转换为js 对象
                          let data = JSON.parse(xhr.responseText);
                          let p1 = document.createElement("p");
                          let p2 = document.createElement("p");
                          let p3 = document.createElement("p");
                          let div = document.querySelector('div');
                          p1.innerHTML = data.name;
                          p2.innerHTML = data.age;
                          p3.innerHTML = data.gender;
                          div.appendChild(p1);
                          div.appendChild(p2);
                          div.appendChild(p3);
          } } } }
      <\/script> `)])]),e("li",null,[l(" AJAX步骤：总共4步 "),e("pre",null,[e("code",{class:"language-js line-numbers"},`  let xhr = new XMLHttpRequest(); // 1、创建xhr对象 （原生ajax对象）
  // 2.1初始化请求（GET/POST）一参是请求方式，二参是服务器地址，演示用的是本地文件
  // 2.2Get 请求方式的参数，直接拼接在url里面 ，?后面内容是请求参数，多个参数用&分割
  xhr.open('GET', './a.json?loginId='+loginId+'&loginPwd='+loginPwd)
  xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded')
  xhr.send(loginId=abc&Pwd=abc);          // 3、发送请求  post方式需要通过send（）方法传递，GET是url
  xhr.onreadystatechange = function () {  // 4、监听读取状态改变事件
      if (xhr.readyState === 4) {         // 判断是否请求完成
          if (xhr.status === 200) {       // 判断请求是否成功
              // 如果成功，执行代码
  } } }`)])]),e("li",null,[l(" JSON "),e("pre",null,[e("code",{class:"language-js line-numbers"},`  // 可以存储对象
  {
      "name": "张三", "age": 20, "gender": "男"
  }

  // 也可以存储数组中对象，数组的话可以使用数组的方法
  [
      {
          "name": "张三", "age": 20, "gender": "男"
      },
      {
          "name": "李四", "age": 30, "gender": "女"
      }
  ]
              `)])])],-1),e("p",null,"GET 和 POST 区别",-1),e("ul",null,[e("li",null," xhr.open('GET', './a.json? loginId='+loginId+'&loginPwd='+loginPwd) "),e("li",null,"GET 传参是拼接在URL里"),e("li",null,"? 后面跟参数， 使用 & 符号拼接参数"),e("li",null," 参数数据的上限是4MB（M = MB）， 假如需要上传音乐或者小视频，那么GET就不够用 "),e("li",null,"且数据不安全，会以明文方式出现在URL上"),e("li",null,"行内规范：一般只会请求数据，不会发送数据"),e("li",null,"xhr.send(loginId=abc&Pwd=abc);"),e("li",null,"POST 是将数据放在 send() 里 &拼接参数"),e("li",null,[l(" 默认传参方式是text 文本类型 ，在发送前需要设置请求头里的属性，Content-Type 百度查询类型 "),e("pre",null,[e("code",{class:"language-js line-numbers"},`  xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded');
  xhr.send(loginId=abc&Pwd=abc);

  // 类型为json时的写法
  xhr.setRequestHeader('Content-Type','application/json');
  xhr.send(\`{"name":"张三","age":20,"gender":"男"}\`);`)])])],-1)])),_:1,__:[2]})]),_:1},8,["data"])}}});export{M as default};
